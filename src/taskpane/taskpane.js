/*
 * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
 * See LICENSE in the project root for license information.
 */

/* global console, document, Excel, Office */


Office.onReady(info => {
  if (info.host === Office.HostType.Excel) {
    document.getElementById("sideload-msg").style.display = "none";
    document.getElementById("app-body").style.display = "flex";
    document.getElementById("run").onclick = run;
  }
});

export async function run() {
  try {
    var platform = Office.context.platform;
    
    Wait.Show("Processing Project Responses", false, function() {

    });
    // change the subject after getting it from the server service
    
    await Excel.run(async context => {

      // Setting up Maturity levels
      var level1MaturityIndexes = [7, 8, 9, 10, 11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 63, 64, 67, 68, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86];
      var level2MaturityIndexes = [15, 16, 25, 17, 32, 39, 55, 56, 57, 65, 66, 69, 77, 87, 88];
      var level3MaturityIndexes = [26, 40, 41, 42, 43, 58, 70, 71, 78, 89, 90, 91];
      const RESPONSE_MAX_SCORE = 10;
      const LEVEL_MIN_THRESHOLD = 70;

      //Setting Up scores
      var responseScores = {};
      responseScores["NA"] = 10;
      responseScores["Always"] = 10;
      responseScores["Frequently"] = 7;
      responseScores["Sometimes"] = 4;
      responseScores["Never"] = 0;
      responseScores["Yes"] = 10;
      responseScores["No"] = 0;
      responseScores["Don't Know"] = 0;

      //loading all existing sheets
      var sheets = context.workbook.worksheets;
      sheets.load("items/name");

      var mainSheet = context.workbook.worksheets.getItem("Form1");

      var responsesTable = mainSheet.tables.getItem("Table1");

      // Get Questions from the header row
      var questions = responsesTable.getHeaderRowRange().load("values");

      // Get data from the table
      var projectResponses = responsesTable.getDataBodyRange().load("values");

      await context.sync();

      // delete all sheets except Form1 and autogenerated ones
      for (var i = 0; i < sheets.items.length; i++) {
        if (sheets.items[i].name != "Form1" && !sheets.items[i].name.startsWith("_")) {
          sheets.items[i].delete();
        }
      }
      await context.sync();

      // Reading Questions and populating into dictionaries
      var headerValues = questions.values;
      var level1Questions = getQuestions(headerValues, level1MaturityIndexes);
      var level2Questions = getQuestions(headerValues, level2MaturityIndexes);
      var level3Questions = getQuestions(headerValues, level3MaturityIndexes);

      //create DEMaturitySummary Sheet
      var maturitySheet = sheets.add("DEMaturitySummary");
      await context.sync();
      maturitySheet = context.workbook.worksheets.getItem("DEMaturitySummary");
      var summaryTable = maturitySheet.tables.add("A1:J1", true /*hasHeaders*/);
      summaryTable.name = "SummaryTable";
      summaryTable.getHeaderRowRange().values = [["ID", "PROJECT", "REVIEW DATE", "EMAIL", "RESOURCE COUNT", "LEVEL 1 SCORE", "LEVEL 2 SCORE", "LEVEL 3 SCORE", "FINAL SCORE", "MATURITY"]];

      var projectSheetsData = [];// for storing all project response calculations

      // Looping project response to calculate maturity
      for (var i = 0; i < projectResponses.values.length; i++) {
        var level1CalculationDetails = CalculateLevelScore(projectResponses.values[i], responseScores, level1MaturityIndexes, 70);
        var level2CalculationDetails = CalculateLevelScore(projectResponses.values[i], responseScores, level2MaturityIndexes, 20);
        var level3CalculationDetails = CalculateLevelScore(projectResponses.values[i], responseScores, level3MaturityIndexes, 10);
        var finalScore = level1CalculationDetails.weightedLevelScore + level2CalculationDetails.weightedLevelScore + level3CalculationDetails.weightedLevelScore;
        var responseId = projectResponses.values[i][0];
        var projectName = projectResponses.values[i][5];
        var reviewDate = getJsDateFromExcel(projectResponses.values[i][2]);
        var email = projectResponses.values[i][3];
        var resourceCount = projectResponses.values[i][6];
        var projectSheetName = projectName.substring(0, 25).replace(/[^a-zA-Z0-9]/g, '') + "_" + responseId;
        // maturity calculation
        var maturity = "";
        if (finalScore <= 70) {
          maturity = "M1";
        }
        else if (finalScore > 70 && finalScore <= 90) {
          maturity = "M2";
        }
        else if (finalScore > 90) {
          maturity = "M3";
        }

        // Adding to summary table in DEMaturity Sheet
        summaryTable.rows.add(null,
          [[responseId,
            projectName,
            reviewDate,
            email,
            resourceCount,
            level1CalculationDetails.weightedLevelScore,
            level2CalculationDetails.weightedLevelScore,
            level3CalculationDetails.weightedLevelScore,
            finalScore,
            maturity
          ]]
        );

        //Highlighting Level Score if < 70
        if (level1CalculationDetails.weightedLevelScore < LEVEL_MIN_THRESHOLD) {
          summaryTable.rows.getItemAt(i).getRange().getCell(0, 5).format.font.color = "#FF0000";
        }

       // adding project sheet here to populate date here bcoz of context.sync dependency
        sheets.add(projectSheetName);

        //  collecting project sheet data
        projectSheetsData.push(
          {
            Id: responseId,
            projectName: projectName,
            email: email,
            reviewDate: reviewDate,
            resourceCount: resourceCount,
            level1CalculationDetails: level1CalculationDetails,
            level2CalculationDetails: level2CalculationDetails,
            level3CalculationDetails: level3CalculationDetails,
            finalScore: finalScore,
            maturity: maturity,
            projectSheetName: projectSheetName
          }
        );

      }

      // Autoformat maturity sheet
      if (Office.context.requirements.isSetSupported("ExcelApi", "1.2")) {
        maturitySheet.getUsedRange().format.autofitColumns();
        maturitySheet.getUsedRange().format.autofitRows();
      }

      
      await context.sync();

      //Writing data to project Sheets
      for (var i = 0; i < projectSheetsData.length; i++) {
        var projectSheetData = projectSheetsData[i];
        var projectSheet = sheets.getItem(projectSheetData.projectSheetName);
        var summaryData = [
          ["ID", projectSheetData.Id],
          ["PROJECT", projectSheetData.projectName],
          ["REVIEW DATE", projectSheetData.reviewDate],
          ["EMAIL", projectSheetData.email],
          ["RESOURCE COUNT", projectSheetData.resourceCount],
          ["LEVEL 1 SCORE", projectSheetData.level1CalculationDetails.weightedLevelScore],
          ["LEVEL 2 SCORE", projectSheetData.level2CalculationDetails.weightedLevelScore],
          ["LEVEL 3 SCORE", projectSheetData.level3CalculationDetails.weightedLevelScore],
          ["FINAL SCORE", projectSheetData.finalScore],
          ["MATURITY", projectSheetData.maturity]
        ];
        var summaryRange = projectSheet.getRange("A1:B10");
        summaryRange.values = summaryData;
        if (Office.context.requirements.isSetSupported("ExcelApi", "1.2")) {
             summaryRange.format.autofitColumns();
        }
      
        
        // Highlighting level 1 score if less than 70
        if(projectSheetData.level1CalculationDetails.weightedLevelScore < 70){
        var level1ScoreRange=summaryRange.getCell(5, 1);// level 1 cell
        level1ScoreRange.format.font.color = "#FF0000";
        }

        var maturityCellRange = summaryRange.getCell(9, 1); // maturity cell
        maturityCellRange.format.fill.color = "#FFFFE0";
        maturityCellRange.format.horizontalAlignment = "Center";
        maturityCellRange.format.borders.getItem('InsideHorizontal').style = "Double";
        maturityCellRange.format.borders.getItem('InsideVertical').style = "Double";
        maturityCellRange.format.borders.getItem('EdgeBottom').style = "Double";
        maturityCellRange.format.borders.getItem('EdgeLeft').style = "Double";
        maturityCellRange.format.borders.getItem('EdgeRight').style = "Double";
        maturityCellRange.format.borders.getItem('EdgeTop').style = "Double";

        //maturityCellRange.format.borders.getItem('EdgeTop').color="#800000";

        maturityCellRange.format.font.bold = true;
        maturityCellRange.format.font.color = "#800000";


        var rowIndex = 14;
        projectSheet.getRange("B" + (rowIndex - 1)).values = [["Level 1 Questions"]];
        var level1Range = projectSheet.getRange("B" + (rowIndex - 1) + ":" + "C" + (rowIndex - 1));
        applyLevelQuestionTopRowProperties(level1Range);

        rowIndex = addLevelTable(level1Questions,
          projectSheetData.level1CalculationDetails.levelFailures,
          projectSheet,
          level1MaturityIndexes,
          "Level1",
          projectResponses.values[i],
          rowIndex,
          context);

        projectSheet.getRange("B" + (rowIndex + 3)).values = [["Level 2 Questions"]];
        var level2Range = projectSheet.getRange("B" + (rowIndex + 3) + ":" + "C" + (rowIndex + 3));
        applyLevelQuestionTopRowProperties(level2Range);

        rowIndex = addLevelTable(level2Questions,
          projectSheetData.level2CalculationDetails.levelFailures,
          projectSheet,
          level2MaturityIndexes,
          "Level2",
          projectResponses.values[i],
          rowIndex + 4,
          context);

        projectSheet.getRange("B" + (rowIndex + 3)).values = [["Level 3 Questions"]];
        var level3Range = projectSheet.getRange("B" + (rowIndex + 3) + ":" + "C" + (rowIndex + 3));
        applyLevelQuestionTopRowProperties(level3Range);


        rowIndex = addLevelTable(level3Questions,
          projectSheetData.level3CalculationDetails.levelFailures,
          projectSheet,
          level3MaturityIndexes,
          "Level3",
          projectResponses.values[i],
          rowIndex + 4,
          context);

        if (Office.context.requirements.isSetSupported("ExcelApi", "1.2")) {
          projectSheet.getUsedRange().format.autofitColumns();
          projectSheet.getUsedRange().format.autofitRows();
        }

        if (platform == "OfficeOnline") {
          context.sync();
        }
        else {
          await context.sync();
        }
           
      }

      summaryTable = maturitySheet.tables.getItem("SummaryTable");
      for (var i = 0; i < projectSheetsData.length; i++) {
        var projectSheet = sheets.getItem(projectSheetsData[i].projectSheetName);
        var level1filter = projectSheet.tables.getItem("Level1Table" + projectResponses.values[i][0]).columns.getItem("Response").filter;
        applyFilter(level1filter);
        var level2filter = projectSheet.tables.getItem("Level2Table" + projectResponses.values[i][0]).columns.getItem("Response").filter;
        applyFilter(level2filter);
        var level3filter = projectSheet.tables.getItem("Level3Table" + projectResponses.values[i][0]).columns.getItem("Response").filter;
        applyFilter(level3filter);

        //DEMaturitySummary -----> Project hyperlink
        var gotoProjectLink = {
          textToDisplay: projectResponses.values[i][5],
          screenTip: "Navigate to the " + projectResponses.values[i][5] + " worksheet",
          //address: "https://www.bing.com"
          documentReference: projectSheetsData[i].projectSheetName + "!A2"
        };
        var projecthyperRange = maturitySheet.getRange("B" + (i + 2));
        projecthyperRange.getCell(0, 0).hyperlink = gotoProjectLink;
        var gotoProjectLinkFromMaturity = {
          textToDisplay: projectSheetData.maturity,
          screenTip: "Navigate to the " + projectResponses.values[i][5] + " worksheet",
          //address: "https://www.bing.com"
          documentReference: projectSheetsData[i].projectSheetName + "!B10"
        };
        var maturityhyperRange = maturitySheet.getRange("J" + (i + 2));
        maturityhyperRange.getCell(0, 0).hyperlink = gotoProjectLinkFromMaturity;
        //Formatting Maturtity Cell
        maturityhyperRange.format.fill.color = "#FFFFE0";
        maturityhyperRange.format.font.bold = true;
        maturityhyperRange.format.font.color = "#800000";


        //Project ----> DEMaturitySummary hyperlink
        var gotoSummaryLink = {
          textToDisplay: "Click here to go to DEMaturitySummary sheet",
          screenTip: "Navigate to the DEMaturitySummary worksheet",
          //address: "https://www.bing.com"
          documentReference: "DEMaturitySummary" + "!A1"
        };
        var hyperlinkRange = projectSheet.getRange("B11");
        hyperlinkRange.getCell(0, 0).hyperlink = gotoSummaryLink;
        hyperlinkRange.format.font.bold = true;
        hyperlinkRange.format.font.color = "#7C3606";
        hyperlinkRange.format.horizontalAlignment = "Center";
        hyperlinkRange.format.fill.color = "#E1D70F";
        //hyperlinkRange.format.autofitColumns();

         context.sync();
      }


      maturitySheet.activate();
      await context.sync();


      // Fetches the questions
      function getQuestions(questionsRow, levelIndexes) {
        var questionDictionary = {}
        levelIndexes.forEach(element => {
          questionDictionary[element] = questionsRow[0][element];
        });
        return questionDictionary;
      }

      //Calculates the Level Scores
      function CalculateLevelScore(projectRow, responseScores, levelIndexes, weightage) {
        var levelFailures = {};
        var levelScore = 0.0;
        var maxLevelScore = levelIndexes.length * 10;
        var levelscorearr = [];
        levelIndexes.forEach(element => {
          var response = projectRow[element];
          if (response && responseScores[response] !== undefined) {
            var score = parseFloat(responseScores[response]);
            if (score != RESPONSE_MAX_SCORE) {
              levelFailures[element] = element;
            }
            levelscorearr.push(score);
            levelScore = levelScore + score;
          }
          else {
            levelScore = levelScore + 0;
          }
        });

        var levelpercentage = (levelScore * 100) / maxLevelScore;
        var weightedLevelScore = ((levelpercentage * weightage) / 100).toFixed(2);
        return {
          levelFailures: levelFailures,
          unWeightedLevelScore: levelScore,
          unWeightedLevelPercentage: levelpercentage,
          weightedLevelScore: parseFloat(weightedLevelScore)
        }

      }

      function applyFilter(filter) {
        filter.apply({
          filterOn: Excel.FilterOn.values,
          values: ["Frequently", "Sometimes", "Never", "No", "Don't Know"]
        });
      }

      function getJsDateFromExcel(dateValue) {

        var reviewDate = new Date((dateValue - (25567 + 2)) * 86400 * 1000);
        let dd = reviewDate.getDate();

        let mm = reviewDate.getMonth() + 1;
        const yyyy = reviewDate.getFullYear();
        if (dd < 10) {
          dd = `0${dd}`;
        }

        if (mm < 10) {
          mm = `0${mm}`;
        }
        return reviewDate = `${mm}-${dd}-${yyyy}`;
      }

      function addLevelTable(questions, levelFailures, projectSheet, levelIndexes, level, projectResponse, rowIndex, context) {

        var tabeleRange = "B" + rowIndex + ":" + "C" + rowIndex;
        var levelQuestionsTable = projectSheet.tables.add(tabeleRange, true /*hasHeaders*/);
        levelQuestionsTable.name = level + "Table" + projectResponse[0];
        levelQuestionsTable.getHeaderRowRange().values = [["Question", "Response"]];
        levelQuestionsTable.getDataBodyRange().format.font.color = "#000000";
        levelIndexes.forEach(function (levelIndex, index) {

          levelQuestionsTable.rows.add(null, [[
            questions[levelIndex],
            projectResponse[levelIndex]
          ]]);

          if (levelFailures[levelIndex] !== undefined) {
            levelQuestionsTable.rows.getItemAt(index).getRange().format.font.color = "#FF0000";
          }
          rowIndex++;
        });
        return rowIndex;
      }

      function applyLevelQuestionTopRowProperties(levelRange) {
        levelRange.merge = true;
        levelRange.format.font.bold = true;
        levelRange.format.font.color = "#FFFFFF";
        levelRange.format.horizontalAlignment = "Center";
        levelRange.format.fill.color = "#154CC5";
      }

    }).catch(function(error){
      console.error(error);
      var errormessage = "There is an error in processing project responses. Please try again or later";
      if (error.code == "ItemNotFound") {
        errormessage = "Please run add-in on DE Survey responses";
      }
      Wait.CloseDialogAsync(function() { 
        // setTimeout(function(){
         // Alert.Show("There is an error try again");
          MessageBox.Show(errormessage,
          "Error",
          MessageBoxButtons.OkOnly,
          MessageBoxIcons.Error,
          false,
          null,
          function(buttonfirst){
            MessageBox.CloseDialogAsync(function(){})
          },
          false
          );
        // },100);
          
      });
    });
    if (Wait.Displayed()) {
      Wait.CloseDialogAsync(function () { });
    }
  } catch (error) {
    console.error(error);

    
  }
  
}
